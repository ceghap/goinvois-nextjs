datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  customers     Customer[]
  companies     Company[]
  Profile       Profile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id        String   @id @default(cuid())
  active    Boolean  @default(true)
  owner     User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String
  address   String
  phone     String
  owner     User     @relation(fields: [userId], references: [id])
  userId    String
  Company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id        String     @id @default(cuid())
  name      String
  email     String
  address   String
  phone     String
  owner     User       @relation(fields: [userId], references: [id])
  userId    String
  customers Customer[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}
